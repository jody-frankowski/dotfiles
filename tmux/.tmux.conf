### Colors
# /!\ If you change a color here you may have to change the ones used in
# window-status-current-format

# Default statusbar color
set -g status-style fg=yellow

# Default window title color
setw -g window-status-style fg=blue

# Active window title color
setw -g window-status-current-style fg=green

# Pane border colors
set -g pane-active-border-style fg=blue
set -g pane-border-style fg=white
###

# Global options
set -g bell-action any
set -g default-terminal "tmux-256color"
set -g escape-time 0
set -g focus-events on
set -g history-limit 100000
set -g mouse on
set -g status-justify centre
# Only update ssh related env variables and not DISPLAY/X11 env vars because
# this is a tmux session on a desktop.
set -g update-environment "SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CLIENT SSH_CONNECTION"

# Status line (command prompt/copy-mode search prompt) key-bindings style
set  -g status-keys emacs
# Copy-mode key-bindings style
setw -g mode-keys   vi

# Prefix key & copy-mode bindings
unbind C-b
set -g prefix C-Space
bind Space    send-prefix
unbind [
bind Space    copy-mode
bind C-Space  copy-mode

# Copy-mode bindings
unbind -T copy-mode    X
unbind -T copy-mode-vi X
bind -T copy-mode      m send -X set-mark
bind -T copy-mode-vi   m send -X set-mark

# Panes history bindings
bind C send -R \; clear-history
bind c clear-history

# Panes navigation bindings
bind h   select-pane -L
bind C-h select-pane -L
bind j   select-pane -D
bind C-j select-pane -D
bind k   select-pane -U
bind C-k select-pane -U
bind l   select-pane -R
bind C-l select-pane -R

# Panes resizing bindings
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Windows splitting bindings
bind "\\" split-window -h -c "#{pane_current_path}"
bind "|" split-window -h -c "#{pane_current_path}"
bind "-" split-window -v -c "#{pane_current_path}"

# Windows without prefix
set -g repeat-time 0
bind -n              M-t new-window -a
bind -T copy-mode-vi M-t new-window -a
bind -n              M-T new-window -a -t'{end}'
bind -T copy-mode-vi M-T new-window -a -t'{end}'
bind -n              M-h previous-window
bind -T copy-mode-vi M-h previous-window
bind -n              M-l next-window
bind -T copy-mode-vi M-l next-window
bind -n              M-H swap-window -d -t -1
bind -T copy-mode-vi M-H swap-window -d -t -1
bind -n              M-L swap-window -d -t +1
bind -T copy-mode-vi M-L swap-window -d -t +1
bind -n              M-D kill-window
bind -T copy-mode-vi M-D kill-window
bind -n              M-s set synchronize-panes off
bind -T copy-mode-vi M-s set synchronize-panes off
bind -n              M-S set synchronize-panes on
bind -T copy-mode-vi M-S set synchronize-panes on

### Nested Tmux
# Empty spaces only for centering the windows
set -g status-right "    "

setenv -g nested_tmux 0

bind -T root M-k  \
  run-shell "tmux setenv nested_tmux $((#{nested_tmux} + 1))" \;\
  set status-right "  #{nested_tmux}â†‘" \;\
  set prefix None \;\
  set key-table off \;\
  if -F '#{pane_in_mode}' 'send -X cancel' \;\
  refresh-client -S

bind -T off M-j \
  if "[ #{nested_tmux} -eq 1 ]" \
        "run-shell '\
          tmux setenv nested_tmux 0 ; \
          tmux set status-right \"    \" ; \
          tmux set -u prefix ; \
          tmux set -u key-table ; \
          tmux refresh-client -S \
    '" \
        "run-shell '\
          tmux setenv nested_tmux $((#{nested_tmux} - 1)) ; \
          tmux send-key M-j ; \
          tmux refresh-client -S \
        '"

bind -T off M-k \
  run-shell "tmux setenv nested_tmux $((#{nested_tmux} + 1))" \;\
  send-key M-k \;\
  refresh-client -S

# Rescue keybinding in case we get stuck for some reason
bind -T off M-0 \
  setenv nested_tmux 0 \;\
  set status-right "    " \;\
  set -u prefix \;\
  set -u key-table \;\
  refresh-client -S
###

### Copy/Paste
unbind p
# Sync the desktop clipboard with tmux's paste buffer and then paste it
bind p run   "clipboard --paste | tmux load-buffer - ; tmux paste-buffer -r"
bind C-p run "clipboard --paste | tmux load-buffer - ; tmux paste-buffer -r"

# Start selection in copy-mode
bind -T copy-mode-vi v send -X begin-selection
# AFAICT copy-pipe both copies the selection in the paste buffer and pipes it to an external command
bind -T copy-mode-vi y send -X copy-pipe "clipboard"
###

# Make tmux resize only the displayed windows to smaller clients
setw -g aggressive-resize on

### Titles and Names
# Set the window's format to the pane title.
# The default #W isn't updated when the pane is switched, so we need
# to use #T directly.

# Renumber windows from 0 whenever one is closed. Even if the number isn't shown in the title, we
# need it to have the first window number always being equal to 0 (see window-status-*format).
set -g renumber-windows on

# 1. Add "| " colored with window-status-fg if it's the first window
# 2. Restore the foreground color to window-status-current-fg
# 3. Add the pane title
# 4. Show window flags if any after removing the "current window" indicator
# 5. Add " |" colored with window-status-fg
setw -g window-status-current-format \
"#{?#{==:#{window_index},0},#[fg=blue]| ,}\
#[fg=green]\
#{pane_title}\
#{?#{s/\\*//:window_flags}, #{s/\\*//:window_flags},}\
 #[fg=blue]|"

# 1. Add "| " if it's the first window
# 2. Add the pane title
# 3. Show window flags if any after removing the "last window" indicator
# 4. Add " |"
setw -g window-status-format \
"#{?#{==:#{window_index},0},| ,}\
#{pane_title}\
#{?#{s/-//:window_flags}, #{s/-//:window_flags},}\
 |"

# The following *standard* escape sequences will change #T:
# '\e]0;TITLE\a' or '\e]2;TITLE\a'

# Because we don't use #W, we don't need to set 'allow-rename' to
# 'on'. This would have let #W be modified by the following non
# standard espace sequence: '\ekTITLE\e\\'

# Finally we let tmux change the outer terminal title
set -g set-titles on
set -g set-titles-string "#{USER}@#h: #T#{?session_alerts, session_alerts,}"

# More information about Windows/Panes title/name can be found here:
# https://github.com/tmux/tmux/issues/1342
###

# Source `.tmux.conf` file - as suggested in `man tmux`
bind R run-shell ' \
  tmux source-file ~/.tmux.conf > /dev/null; \
  tmux display-message "Sourced .tmux.conf!"'

source-file -q ~/.tmux/*.tmux

# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'

# Inits tpm. Keep at bottom.
run-shell '~/.tmux/plugins/tpm/tpm'
