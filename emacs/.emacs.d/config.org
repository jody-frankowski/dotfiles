* Helpers

Add a =csetq= macro that calls the appropriate function to set a variable (the
custom-set one, set-default, or just set). This should be safer than using
=setq= because a variable may get "customized" later on. (Don't forget that
using =setq= when a variable needs "customization" can cause problems because
the setting function associated to that variable wouldn't be called)

Stolen from
https://lists.gnu.org/archive/html/help-gnu-emacs/2015-12/msg00097.html

#+BEGIN_SRC emacs-lisp
(defmacro csetq (variable value)
  "Macro to set the value of a variable, possibly a custom user option."
  `(funcall (or (get ',variable 'custom-set)
                (and (plist-member (symbol-plist ',variable)
                                   'standard-value) 'set-default)
                'set)
            ',variable ,value))
#+END_SRC


* Auto Pairs

Enable =electric-pair-mode= to automatically insert matching brackets or quotes:

#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
#+END_SRC

* Auto Refresh Buffers

Set Emacs to auto refresh the file backed buffers if the file changed,
but not if the buffer is changed.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
;; Make it quiet
(csetq auto-revert-verbose nil)
#+END_SRC

Enable the refresh for dired views too:

#+BEGIN_SRC emacs-lisp
(csetq global-auto-revert-non-file-buffers t)
#+END_SRC

* Backups and Saving

With a combination of =undo-fu= (~u~ and ~C-r~) and auto-saving, a loss of work should be pretty
small. Emacs auto-save is configured to save every 300 keystrokes or 30 seconds of idle time, in the
edited file, and not in an external one that we might forget to restore from! We will also configure
Emacs to save and restore the last point position.

Enable and configure persistent undo with undo-fu:

#+BEGIN_SRC emacs-lisp
(use-package undo-fu)
(use-package undo-fu-session)
(global-undo-fu-session-mode)
(csetq undo-fu-session-file-limit 100)
(csetq undo-fu-session-directory "~/.cache/emacs/undo-fu/")
#+END_SRC

Configure evil-mode to use undo-fu:

#+BEGIN_SRC emacs-lisp
(csetq evil-undo-system 'undo-fu)
#+END_SRC

Configure Emcas to auto-save in the edited file:

#+BEGIN_SRC emacs-lisp
(auto-save-visited-mode)
#+END_SRC

Disable "backup~" files, persistent undo should be enough:

#+BEGIN_SRC emacs-lisp
(csetq make-backup-files nil)
#+END_SRC

Configures Emacs to save and restore the last place of the point
between sessions:

#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC

Don't prompt for saving when calling =save-some-buffers=:

#+BEGIN_SRC emacs-lisp
(defun set-buffer-save-without-query ()
  "Set `buffer-save-without-query' to t."
  (unless (variable-binding-locus 'buffer-save-without-query)
    (setq buffer-save-without-query t)))

(add-hook #'find-file-hook #'set-buffer-save-without-query)
#+END_SRC

* Bell

Disable the bell:

#+BEGIN_SRC emacs-lisp
(csetq ring-bell-function 'ignore)
#+END_SRC

* Brackets

Configures Emacs to highlight the matching brackets:

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

* Clipboard

Save the clipboard content before overwriting it from Emacs:

#+BEGIN_SRC emacs-lisp
(csetq save-interprogram-paste-before-kill t)
#+END_SRC

Link the kill ring with the system clipboard with the ~xclip~ package. This
should work even if emacs runs exclusively in the terminal:

#+BEGIN_SRC emacs-lisp
(use-package xclip)
(xclip-mode)
#+END_SRC

* Customize Config

Put all customizations in seperate file so it doesn't clobber our init.el:

#+BEGIN_SRC emacs-lisp
(csetq custom-file "~/.emacs.d/custom.el")
(if (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Dired

Add "-h" to the dired ls flags:

#+BEGIN_SRC emacs-lisp
(csetq dired-listing-switches "-alh")
#+END_SRC

* Echo Area

This will disable the "Text is read-only" error in the Echo Area.  Stolen (and
adapted) from
https://emacs.stackexchange.com/questions/10932/how-do-you-disable-the-buffer-end-beginning-warnings-in-the-minibuffer:

#+BEGIN_SRC emacs-lisp
(defun my-command-error-function (data context caller)
  "Ignore the `text-read-only', `beginning-of-buffer',
`end-of-buffer' signals; pass the rest to the default handler."
  (unless (memq (car data) '(text-read-only
                             ;; Not sure when these two occur, but
                             ;; it's probably better to keep them
                             ;; anyway
                             beginning-of-buffer
                             end-of-buffer))
    (command-error-default-function data context caller)))

(csetq command-error-function #'my-command-error-function)
#+END_SRC

* Ediff

#+BEGIN_SRC emacs-lisp
(csetq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

* evil-mode

Enable evil-mode. This needs to be put before any other evil package is loaded:

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  ;; Makes C-u scroll like in vim
  (csetq evil-want-C-u-scroll t)
  ;; Makes Y copy like in vim
  (csetq evil-want-Y-yank-to-eol t)
  ;; Evil currently has a bug where typing * or # on the first
  ;; whitespace char of a line doesn't work in some cases. See
  ;; https://github.com/emacs-evil/evil/issues/1160
  ;; If you want to "fix" this you could set evil-symbol-word-search
  ;; as shown:
  ;;(csetq evil-symbol-word-search t)
  ;; But note that it would also change the word selection of these
  ;; commands. Eg. "test-123" would now be considered a word while it
  ;; previously was only "test".
  :config
  (evil-mode 1))
#+END_SRC

Makes =(= and =)= motions work like with the default Vim settings, namely not
supposing that sentences are followed by two spaces:

#+BEGIN_SRC emacs-lisp
(csetq sentence-end-double-space nil)
#+END_SRC

Makes TAB behave like both C-i in Vim and TAB in Emacs (eg. Jump forward and
open tree) in org-mode. In other mode we just set it to behave as C-i in Vim.
See https://catern.com/posts/terminal_quirks.html for why C-i is equivalent to
TAB in a terminal.
This effectively covers the possible values of =evil-want-C-i-jump= for org-mode
more intelligently.
This can be extended to other modes as needs be. (Incidentally it also "fixes"
yasnippet expanding things while in normal mode):

#+BEGIN_SRC emacs-lisp
(csetq evil-want-C-i-jump t)
(defun my-org-mode-C-i-handler (&optional arg)
  (interactive)
  (if (eq (length (recent-keys)) 1)
      (org-cycle))
  (let ((second-to-last-key-pressed (aref (recent-keys)
                                          (- (length (recent-keys))
                                             2))))
    (cond
     ;; C-o TAB
     ((eq second-to-last-key-pressed 15)
      (setq my-org-mode-C-i-handler-in-sequence t) (evil-jump-forward))
     ;; !(C-o|C-i) TAB
     ((not (or (eq second-to-last-key-pressed 9)
               (eq second-to-last-key-pressed 15)))
      (setq my-org-mode-C-i-handler-in-sequence nil) (org-cycle))
     ;; !(C-o|C-i) TAB TAB
     ((eq my-org-mode-C-i-handler-in-sequence nil) (org-cycle))
     ;; C-o|C-i TAB
     ((eq my-org-mode-C-i-handler-in-sequence t) (evil-jump-forward)))))
(setq my-org-mode-C-i-handler-in-sequence nil)
(evil-define-key 'normal org-mode-map (kbd "TAB") #'my-org-mode-C-i-handler)
#+END_SRC

Install evil-numbers to make C-a and C-x among others work:

#+BEGIN_SRC emacs-lisp
(straight-use-package
  '(el-patch :type git :host github :repo "dieggsy/evil-numbers"))
#+END_SRC

Note that we don't set =evil-search-module= to =evil-search= because it's much
slower than isearch.

** Alignment

Enable motioned alignments with evil-lion:

#+BEGIN_SRC emacs-lisp
(use-package evil-lion
  :init
  (csetq evil-lion-left-align-key (kbd "g a"))
  (csetq evil-lion-right-align-key (kbd "g A"))
  :config
  (evil-lion-mode))
#+END_SRC

** Comments

Install
[[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to
provide =SPC ;= and =SPC c y= operators (=SPC ;= is a bit faster to type than
=SPC c c=):

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter)
#+END_SRC

** matchit

Install [[https://github.com/redguardtoo/evil-matchit][evil-matchit]] to provide a more complete
support of the '%' operator:

#+BEGIN_SRC emacs-lisp
(use-package evil-matchit)
(require 'evil-matchit)
(global-evil-matchit-mode 1)
#+END_SRC

* Eyebrowse

Add the ~eyebrowse~ package that helps us manage window configurations and hence
simulating tabs:

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse)
(eyebrowse-mode)

(defun me/new-eyebrowse-window-config ()
  "Create a new \"tab\" with eyebrowse."
  (interactive)
  (eyebrowse-create-window-config)
  (delete-other-windows))
#+END_SRC

* Files

Automatically create missing directories when using =find-file= (or
=counsel-find-file= which calls =find-file=):

#+BEGIN_SRC emacs-lisp
(defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
  "Create parent directory if not exists while visiting file."
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir t)))))
#+END_SRC

* Git

Install Magit, evil-magit:

#+BEGIN_SRC emacs-lisp
(use-package magit)
(use-package evil-magit)
#+END_SRC

Install git-gutter for a git diff margin:

#+BEGIN_SRC emacs-lisp
;; Consistently doesn't update for unknown reasons! :( :( :(
;; (use-package diff-hl)
;; (global-diff-hl-mode)
;; (diff-hl-margin-mode)
;; (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
;; (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
;; Mouse resizing to the right in the terminal is broken with this mode
;; https://github.com/syohex/emacs-git-gutter/issues/162
(use-package git-gutter)
(global-git-gutter-mode)
#+END_SRC

* GPG

Install the ~pinentry~ package and start it. It should now catch calls to
gpg-agent and let us enter the passphrase in a proper Emacs miniwindow:

#+BEGIN_SRC emacs-lisp
(use-package pinentry
  :config
  (pinentry-start))
#+END_SRC

* Indentation

Add editorconfig which will configure the proper indentation settings based on
the ~.editorconfig~ files (if no file is found emacs defaults will be applied):

#+BEGIN_SRC emacs-lisp
(csetq mode-require-final-newline nil)
;; The config below doesn't seem to work!
(use-package editorconfig
  :config
  (editorconfig-mode 1))
;; require-final-newline is managed by ethan-wspace so we block it
;; so it doesn't warn us about it.
(add-hook 'editorconfig-hack-properties-functions
    '(lambda (props)
        (puthash 'insert_final_newline "false" props)))
#+END_SRC

Make editorconfig work with files without extension by faking the extension
based on the major-mode (Stolen from
https://github.com/editorconfig/editorconfig-emacs/issues/75#issuecomment-350182935
and
https://github.com/hlissner/doom-emacs/blob/develop/modules/tools/editorconfig/config.el):

#+BEGIN_SRC emacs-lisp
;; editorconfig cannot procure the correct settings for extension-less files.
;; Executable scripts with a shebang line, for example. So why not use Emacs'
;; major mode to drop editorconfig a hint? This is accomplished by temporarily
;; appending an extension to `buffer-file-name' when we talk to editorconfig.
(defvar +editorconfig-mode-alist
  '((perl-mode   . "pl")
    (php-mode    . "php")
    (python-mode . "py")
    (ruby-mode   . "rb")
    (sh-mode     . "sh")))
;;"An alist mapping major modes to extensions. Used by
;;`editorconfig-smart-detection' to give editorconfig filetype hints.")

(defun editorconfig-smart-detection (orig-fn)
    "Retrieve the properties for the current file. If it doesn't have an
    extension, try to guess one."
    (let ((buffer-file-name
           (if (and (not (bound-and-true-p org-src-mode))
                    (file-name-extension buffer-file-name))
               buffer-file-name
             (format "%s%s" buffer-file-name
                     (if-let* ((ext (cdr (assq major-mode +editorconfig-mode-alist))))
                         (concat "." ext)
                       "")))))
      (funcall orig-fn)))
(advice-add #'editorconfig-call-editorconfig-exec :around #'editorconfig-smart-detection)
#+END_SRC

Set indentation to spaces instead of the mix of tabs and spaces default
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Just-Spaces.html]]:

#+BEGIN_SRC emacs-lisp
(csetq indent-tabs-mode nil)
#+END_SRC

* Line and Column Numbers

Show line numbers, and also show column number in the status bar. Line
numbers aren't activated for the first buffer with emacsclient because of
https://github.com/emacs-mirror/emacs/blob/master/lisp/display-line-numbers.el#L97.
I'm not sure why ~frame-parameter~ returns nil :/. So let's override the culprit
function and use it in a custom global minor mode.

#+BEGIN_SRC emacs-lisp
(defun my-display-line-numbers--turn-on ()
  "Turn on `display-line-numbers-mode'."
  (unless (minibufferp)
    (display-line-numbers-mode)))

(define-globalized-minor-mode my-global-display-line-numbers-mode
  display-line-numbers-mode my-display-line-numbers--turn-on)
(my-global-display-line-numbers-mode)

(csetq display-line-numbers-type t)

;; Make Emacs set the line-numbers width to the largest width needed
;; Why isn't this the default ? :(
(csetq display-line-numbers-width-start t)

;; Do not let Emacs size down the line numbers width if we are
;; displaying a smaller line number (eg. line under 100 when the file
;; has more than 100 lines)
;; Why isn't this the default ? x2 :(
(csetq display-line-numbers-grow-only t)

(csetq column-number-mode t)
#+END_SRC

* Load Path

Add ~/.emacs.d/lisp to load-path so that we can pull individual .el files
directly:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

* Markdown Mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC

* Minibuffer Completion

Install Ivy, Counsel and Swiper:

#+BEGIN_SRC emacs-lisp
(use-package counsel)
#+END_SRC

# TODO Add the recent files to ~ivy-switch-buffers~:

#+BEGIN_SRC emacs-lisp
;;(csetq ivy-use-virtual-buffers t)
#+END_SRC

Remove "^" from the initial input:

#+BEGIN_SRC emacs-lisp
(csetq ivy-initial-inputs-alist nil)
#+END_SRC

Enable a more intelligent sorting of ~ivy~ matches with ~prescient~. Note that
prescient does an out of order match and overrides ~ivy-re-builders-alist~:

#+BEGIN_SRC emacs-lisp
(use-package prescient)
(use-package ivy-prescient)
(prescient-persist-mode)
(csetq ivy-prescient-retain-classic-highlighting t)
(ivy-prescient-mode)
#+END_SRC

Remove "." and ".." when matching files:

#+BEGIN_SRC emacs-lisp
(csetq ivy-extra-directories nil)
#+END_SRC

Switch to the home directory with "~/" and not "~":

#+BEGIN_SRC emacs-lisp
(csetq ivy-magic-tilde nil)
#+END_SRC

Increase the number of results:

#+BEGIN_SRC emacs-lisp
(csetq ivy-height 20)
#+END_SRC

Enable the mode:

#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
#+END_SRC

* Org

Set org-mode to show edits that are hidden in folded trees (eg. x in
command mode).  Note that this won't protect against insert mode
deletions :/
https://emacs.stackexchange.com/questions/10708/org-mode-evil-prevent-editing-of-hidden-text-within-collapsed-subtree
seems to confirm that we are right.

FIXME make this work for all evil-mode edits.
FIXME doesn't seem to work outside of spacemacs, even for the 'x' command in folded tree

The way it works is that org-mode calls org-check-before-invisible-edit in functions
(eg. org-self-insert-command) that are about the edit the buffer. The
problem is that evil-mode doesn't call the same functions, so the
check is never done.  evil-org-mode hooks some of them, and is
included in spacemacs, so that's why it can work for 'x' in spacemacs.

#+BEGIN_SRC emacs-lisp
(csetq org-catch-invisible-edits 'error)
#+END_SRC

Tells org-mode to indent trees visually even if they aren't really:

#+BEGIN_SRC emacs-lisp
(csetq org-startup-indented t)
#+END_SRC

Tells org-mode to preserve indentation when exporting code
blocks. Also a way not to have indentation in code blocks.

#+BEGIN_SRC emacs-lisp
(csetq org-edit-src-content-indentation 0)
#+END_SRC

Enable auto saving of the edit buffer into the original file after 1 second of
idleness:

#+BEGIN_SRC emacs-lisp
(csetq org-edit-src-auto-save-idle-delay 1)
#+END_SRC

Tells =org-edit-special= not to come back to a single window after edition.

The available configurations are not satisfactory imho.
What I want:
- To see the original buffer
- To preserve the original layout when returning from edition

This configuration provides both by creating a new window (split to the right)
and simply closing the split when exiting. A possible improvement would be, when
the frame is small, to hijack a window and to restore its buffer when exiting.

#+BEGIN_SRC emacs-lisp
(defun org-src-switch-to-buffer (buffer context)
  (pcase context
    ('edit
     (split-window-right)
     (windmove-right))
    ('exit (delete-window)))
  (switch-to-buffer buffer))
#+END_SRC

Change the TODO workflow:

#+BEGIN_SRC emacs-lisp
(csetq org-todo-keywords
  '((sequence "TODO" "DOING" "WAITING" "|" "DONE" "CANCELLED" "OBSOLETE")))
#+END_SRC

Install ~evil-org~ so that keybindings like ~>~ or ~<~ behave as
expected and also support motion (contrary to ~org-evil~):

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme))))
#+END_SRC

Change the org-preview-latex "ltximg" directory location:

#+BEGIN_SRC emacs-lisp
(csetq org-preview-latex-image-directory (expand-file-name "~/.cache/emacs/ltximg/"))
#+END_SRC

Upscale latex previews (even on FHD screens they are too small):

#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

** org-drill

#+BEGIN_SRC emacs-lisp
(use-package org-drill)

(csetq org-drill-left-cloze-delimiter "<[")
(csetq org-drill-right-cloze-delimiter "]>")

(csetq org-drill-maximum-items-per-session 50) ; default is 30
(csetq org-drill-maximum-duration 40) ; default is 20 minutes
#+END_SRC

Hide the headings during drill sessions:

#+BEGIN_SRC emacs-lisp
(csetq org-drill-hide-item-headings-p t)
#+END_SRC

Lower the *learn fraction* to be a little more on the safe side (default is =0.5=):

#+BEGIN_SRC emacs-lisp
(csetq org-drill-learn-fraction 0.45)
#+END_SRC

*** TODO org-drill: implement fact expiration?
*** TODO org-drill: implement a way to tell "I want Emacs to tell me to add more facts about this card when this one is remembered or in X days". Example: pi decimals and prime numbers.

** anki-editor

#+BEGIN_SRC emacs-lisp
(use-package anki-editor)
#+END_SRC

** babel

Disable confirmation prompt when evaluation code blocks:

#+BEGIN_SRC emacs-lisp
(csetq org-confirm-babel-evaluate nil)
#+END_SRC

Enable more languages for babel code execution:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (scheme . t)))
#+END_SRC

Stolen from http://kitchingroup.cheme.cmu.edu/blog/2015/03/19/Restarting-org-babel-sessions-in-org-mode-more-effectively/

#+BEGIN_SRC emacs-lisp
(defun src-block-in-session-p (&optional name)
  "Return if src-block is in a session of NAME.
NAME may be nil for unnamed sessions."
  (let* ((info (org-babel-get-src-block-info))
         (lang (nth 0 info))
         (body (nth 1 info))
         (params (nth 2 info))
         (session (cdr (assoc :session params))))

    (cond
     ;; unnamed session, both name and session are nil
     ((and (null session)
           (null name))
      t)
     ;; Matching name and session
     ((and
       (stringp name)
       (stringp session)
       (string= name session))
      t)
     ;; no match
     (t nil))))

(defun org-babel-restart-session-to-point (&optional arg)
  "Restart session up to the src-block in the current point.
Goes to beginning of buffer and executes each code block with
`org-babel-execute-src-block' that has the same language and
session as the current block. ARG has same meaning as in
`org-babel-execute-src-block'."
  (interactive "P")
  (unless (org-in-src-block-p)
    (error "You must be in a src-block to run this command"))
  (let* ((current-point (point-marker))
         (info (org-babel-get-src-block-info))
         (lang (nth 0 info))
         (params (nth 2 info))
         (session (cdr (assoc :session params))))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
        ;; goto start of block
        (goto-char (match-beginning 0))
        (let* ((this-info (org-babel-get-src-block-info))
               (this-lang (nth 0 this-info))
               (this-params (nth 2 this-info))
               (this-session (cdr (assoc :session this-params))))
          (when
              (and
               (< (point) (marker-position current-point))
               (string= lang this-lang)
               (src-block-in-session-p session))
            (org-babel-execute-src-block arg)))
        ;; move forward so we can find the next block
        (forward-line)))))

(defun org-babel-kill-session ()
  "Kill session for current code block."
  (interactive)
  (unless (org-in-src-block-p)
    (error "You must be in a src-block to run this command"))
  (save-window-excursion
    (org-babel-switch-to-session)
    (kill-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (csetq org-babel-default-header-args
;;   (cons '(:results . "output")
;;   (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC

* TODO Polymode

Install ~polymode~ for ~org-mode~ and ~markdown-mode~ which will activate
e.g. emacs-lisp mode when the cursor is in a emacs-lisp code block in a org-mode
buffer (<3 All my love goes to this mode <3):

#+BEGIN_SRC emacs-lisp
;;(use-package poly-org)
;;(use-package poly-markdown)
#+END_SRC

* Prefer Newer Files
Configure Emacs to load a '.el' instead of a '.elc' if the '.el' is newer:

#+BEGIN_SRC emacs-lisp
(csetq load-prefer-newer t)
#+END_SRC

* Programming
** Autocompletion

Install =company=. =lsp-mode= will automatically use it for completion:

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  ;; Enable completion-as-you-type behavior.
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  ;; Add personal keybindings
  (define-key company-active-map (kbd "C-j") 'company-select-next)
  (define-key company-active-map (kbd "C-k") 'company-select-previous)
  (define-key company-search-map (kbd "C-j") 'company-select-next)
  (define-key company-search-map (kbd "C-k") 'company-select-previous))
#+END_SRC

** Languages
*** C

Set the default c indentation style to "linux" rather than gnu
(https://www.emacswiki.org/emacs/IndentingC#toc2). The default style produces
code such as:

#+BEGIN_SRC c
if(foo)
  {
    bar++;
  }
#+END_SRC

#+BEGIN_SRC emacs-lisp
(csetq c-default-style "linux")
#+END_SRC

*** Go

Install =go-mode=:

#+BEGIN_SRC emacs-lisp
(use-package go-mode)
#+END_SRC

Configure =lsp-mode= for Go:

#+BEGIN_SRC emacs-lisp
;; Start an LSP server startup when a Go buffer is visible for the first time.
(add-hook 'go-mode-hook #'lsp-deferred)

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+END_SRC

*** Lisp

Make lisp editing in evil-mode nicer with ~lispyville~ (e.g. ~dd~ will balance
parenthesis):

#+BEGIN_SRC emacs-lisp
(use-package lispyville
    :config
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode)
    (add-hook 'lisp-mode-hook #'lispyville-mode)
    (add-hook 'scheme-mode-hook #'lispyville-mode))
#+END_SRC

Disable editorconfig for lisp modes. Emacs builtin should be better:

#+BEGIN_SRC emacs-lisp
(dolist (mode '(emacs-lisp-mode lisp-mode))
  (csetq editorconfig-indentation-alist
    (assq-delete-all mode editorconfig-indentation-alist)))
#+END_SRC

Explicitely set ~evil-shift-width~ which is used by the ~<~ and ~>~ indentation
commands to 2 (default is 4):

#+BEGIN_SRC emacs-lisp
(dolist (mode '(emacs-lisp-mode-hook lisp-mode-hook))
  (add-hook mode
    (function (lambda ()
                (csetq evil-shift-width 2)))))
#+END_SRC

Install Geiser for a better integration of other Lisps (Guile/Scheme/Racket) in
Emacs (e.g. it provides =run-mit= and =run-guile=). It's also needed by
=ob-scheme= for org-babel session evaluations:

#+BEGIN_SRC emacs-lisp
(use-package geiser)
#+END_SRC

Set geiser default scheme implementation (mit for now):

#+BEGIN_SRC emacs-lisp
(csetq geiser-default-implementation 'mit)
#+END_SRC

*** Rust

#+BEGIN_SRC emacs-lisp
(use-package rustic)
(csetq rustic-format-on-save t)
(csetq rustic-format-trigger 'on-save)
#+END_SRC

** LSP

Install =lsp-mode= and =lsp-ui=:

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred))

(use-package lsp-ui
  :commands lsp-ui-mode)
#+END_SRC

** Syntax Checking

Install =flycheck= for on-the-fly syntax checking:

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

Disable flycheck's emacs-lisp-checkdoc for org-edit-special buffers:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-src-mode-hook
          (lambda ()
            (when (eq major-mode 'emacs-lisp-mode)
              (csetq flycheck-disabled-checkers '(emacs-lisp-checkdoc)))))
#+END_SRC

* Project Management

Install =projectile=:

#+BEGIN_SRC emacs-lisp
(use-package projectile)
#+END_SRC

Configure =projectile= to use ivy for its completion:

#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'ivy)
#+END_SRC

* Recent Files

Enable the =recentf= minor mode which builds a list of recently opened files:

#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-saved-items 100)
#+END_SRC

Save the list every 5 minutes (the new entries are lost if Emacs crashes):

#+BEGIN_SRC emacs-lisp
(run-at-time nil (* 5 60) 'recentf-save-list)
#+END_SRC

* Terminal

Enable mouse support in the terminal:

#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode)
#+END_SRC

* UI

Disable useless UI elements:

#+BEGIN_SRC emacs-lisp
;; Modes are usually disabled by calling an associated function with negative values.
;; Setting the corresponding variable won't work.
(if (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
(setq inhibit-startup-screen t)
#+END_SRC

** Theme

Install doom-themes and load doom-one-light:

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-one-light t))
;; Not mature enough :/
;;(use-package base16-theme
;;  :config
;;  (csetq base16-theme-256-color-source "colors")
;;  (load-theme 'base16-summerfruit-light t))
#+END_SRC

Override the background color of whitespace-tab otherwise it's a very visible
dark gray:

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'whitespace
  (set-face-background 'whitespace-tab nil))
#+END_SRC

* UX

Make all prompts use =y= or =n= as an answer:

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable popup prompts (dialog boxes) because they often screw the emacsclient
display:

#+BEGIN_SRC emacs-lisp
(csetq use-dialog-box nil)
#+END_SRC

Reproduction steps for the above problem:
- Write something to a file, without saving
- Modify the file outside of Emacs
- Ask to save the file from Emacs
- Don't answer to the Echo Area prompt
- Popup now shows up

Make scrolling smoother (line by line) and without jumps, while keeping 10 lines
visible under point at all times:

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 9999)
(setq scroll-margin 10)
#+END_SRC

Note that scrolling from the very bottom is buggy:
[[https://github.com/syl20bnr/spacemacs/issues/8224][https://github.com/syl20bnr/spacemacs/issues/8224]]

* TODO Unicode Homoglyphs Highlighter

Add unicode-troll-stopper which highlights unicode homoglyphs. (Think
https://github.com/reinderien/mimic).

Breaks Magit. Doesn't work properly in itself. :/

#+BEGIN_SRC emacs-lisp
;;(use-package unicode-troll-stopper)
;;(define-globalized-minor-mode
;;    global-unicode-troll-stopper-mode
;;    unicode-troll-stopper-mode
;;    (lambda ()
;;        (unicode-troll-stopper-mode 1)))
;;(global-unicode-troll-stopper-mode 1)
#+END_SRC

* Version Control

Automatically follow symbolic links to files under version control (stops Emacs from asking):

#+BEGIN_SRC emacs-lisp
;; Also set in init.el so it doesn't bother us when we edit the emacs
;; config that is just changed, thus regenerated.
(csetq vc-follow-symlinks t)
#+END_SRC

* Whitespace

Use the built-in whitespace-mode to show tabs with a custom symbol, trailing
spaces, empty lines, characters after the ~fill-column~ and specials spaces
(hard space and ideographic space) with a custom symbol:

#+BEGIN_SRC emacs-lisp
(csetq
  whitespace-style '(face tabs trailing empty lines-tail space-mark tab-mark))
  (csetq whitespace-display-mappings
    '(
        (space-mark   ?\xA0  [?\u25a0]     [?_]) ; hard space - black square
        (space-mark ?\u3000 [?\u25a1])           ; ideographic space - white square
        ;;
        ;; Examples:
        ;; NO-BREAK SPACE: ` `
        ;; IDEOGRAPHIC SPACE: `　`
        ;;
        ;; WARNING: the mapping below has a problem.
        ;; When a TAB occupies exactly one column, it will display the
        ;; character ?\xBB at that column followed by a TAB which goes to
        ;; the next TAB column.
        ;; If this is a problem for you, please, comment the line below.
        (tab-mark     ?\t    [?› ?\t] [?\\ ?\t]) ; tab - right guillemet
))
#+END_SRC

Make sure whitespace-mode uses ~fill-column~ value:

#+BEGIN_SRC emacs-lisp
(csetq whitespace-line-column nil)
#+END_SRC

Enable whitespace-mode for all prog and text buffers:

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'text-mode-hook 'whitespace-mode)
#+END_SRC

Add ethan-wspace that will highlight existing whitespace errors and clean new
ones. It's very handy and will help not cluttering git logs. By default it
highlights tabs unless ~indent-tabs-mode~ is set. It also handles the final
newline.

#+BEGIN_SRC emacs-lisp
(use-package ethan-wspace
  :config
  (global-ethan-wspace-mode 1))
;; Disable for the magit commit buffer
(add-hook 'text-mode-hook
    (lambda ()
      (if (and buffer-file-name
               (equal (file-name-nondirectory buffer-file-name)
                      "COMMIT_EDITMSG"))
          (ethan-wspace-mode -1))))
#+END_SRC

* Windows

Add two window functions that either switch to an existing window or split and
launch ~find-file~:

#+BEGIN_SRC emacs-lisp
(defun window-right-or-split ()
  "Split the window vertically, focus the new window and launch `find-file'."
  (interactive)
  (let ((other-window (windmove-find-other-window 'right (selected-window))))
    (cond
      ((null other-window)
        (split-window-right)
        (windmove-right)
        (counsel-find-file))
      (t (select-window other-window)))))

(defun window-down-or-split ()
  "Split the window horizontally, focus the new window and launch `find-file'."
  (interactive)
  (let ((other-window (windmove-find-other-window 'down (selected-window))))
    (cond
      ((or (null other-window) (window-minibuffer-p other-window))
        (split-window-below)
        (windmove-down)
        (counsel-find-file))
      (t
        (select-window other-window)))))
#+END_SRC

* Yasnippet

Install yasnippet and the snippets packages:

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :defer 10
  :config
  (csetq yas-snippet-dirs
        '("~/.emacs.d/snippets")))
(use-package yasnippet-snippets)
(yas-global-mode)
#+END_SRC

Disable Yasnippet overlay protection in org-mode because it interferes with the
org-drill snippet. When you type in a heading that has an org-mode tag
(eg. =:drill:=) the tag will automatically be shifted to the right, causing
yasnippet to abort in the default configuration:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (setq-local yas-inhibit-overlay-modification-protection t)))
#+END_SRC

* Keybindings

Install General:

#+BEGIN_SRC emacs-lisp
(use-package general)
#+END_SRC

Tell general to automatically unbind *prefix* keys that conflict
(https://github.com/noctuid/general.el#automatic-key-unbinding):

#+BEGIN_SRC emacs-lisp
(general-auto-unbind-keys)
#+END_SRC

Misc keybindings with General:

#+BEGIN_SRC emacs-lisp
(general-define-key
  ;; With this combination of keymaps/states the following keybinding
  ;; seem to work everywhere (even in dired, *Help*, *Messages* and magit)

  ;; /!\ There's a weird bug(?) where the keybindings don't work when first
  ;; opening the *Messages* buffer but work as soon as you switch out and back
  ;; in the window!

  :states '(emacs motion normal visual)
  :keymaps '(override)
  :prefix "SPC"
  "SPC" 'counsel-M-x
  "bb"  'counsel-ibuffer
  "bd"  'kill-this-buffer
  "bn"  'next-buffer
  "bp"  'previous-buffer
  "cy"  'evilnc-copy-and-comment-operator
  "ff"  'counsel-find-file
  "fj"  'dired-jump
  "fr"  'counsel-recentf
  "gs"  'magit-status
  "hdf" 'counsel-describe-function
  "hdk" 'describe-key
  "hdm" 'describe-minor-mode
  "hdM" 'describe-mode
  "hdv" 'counsel-describe-variable
  "mTT" 'org-todo
  "pf"  'projectile-find-file
  "pr"  'projectile-recentf
  "pR"  'projectile-replace
  "qq"  'save-buffers-kill-emacs
  "ry"  'counsel-yank-pop
  "tw"  'whitespace-mode
  "wd"  'delete-window
  "wh"  'windmove-left
  "wj"  'window-down-or-split
  "wk"  'windmove-up
  "wl"  'window-right-or-split
  ";"   'evilnc-comment-operator
  "/"   'counsel-rg)

(general-define-key
  :states '(normal)
  :keymaps '(override)
  "C-a" 'evil-numbers/inc-at-pt
  "C-x" 'evil-numbers/dec-at-pt
)

(general-define-key
  :states '(insert)
  :keymaps '(override)
  "C-h" nil)

(general-def ivy-minibuffer-map
  "C-j" 'ivy-next-line
  "C-k" 'ivy-previous-line)

(general-def evil-ex-completion-map
  "C-b" 'backward-char)

(general-def 'normal dired-mode-map
  "h" 'dired-up-directory
  "l" 'dired-find-file)

(general-def '(insert normal visual) 'override
  "M-h" 'eyebrowse-prev-window-config
  "M-l" 'eyebrowse-next-window-config
  "M-t" 'me/new-eyebrowse-window-config
  "M-d" 'eyebrowse-close-window-config)
#+END_SRC

Add some vim specific keybindings that are missing from evil-mode or not
installed because a component isn't used (eg. =evil-search-module= being set to
isearch):

#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map (kbd "C-n") 'isearch-ring-advance)
(define-key minibuffer-local-isearch-map (kbd "C-n") 'next-history-element)
(define-key isearch-mode-map (kbd "C-p") 'isearch-ring-retreat)
(define-key minibuffer-local-isearch-map (kbd "C-p") 'previous-history-element)
#+END_SRC

Unbind some keybindings that duplicate other evil/vim keybindings:

#+BEGIN_SRC emacs-lisp
;; Duplicates gc
(global-unset-key (kbd "M-;"))
;; Duplicates gq
(global-unset-key (kbd "M-q"))
;; Duplicates C-v
(global-unset-key (kbd "C-q"))
;; Duplicates C-n
(define-key isearch-mode-map (kbd "M-n") nil)
(define-key minibuffer-local-isearch-map (kbd "M-n") nil)
;; Duplicates C-p
(define-key isearch-mode-map (kbd "M-p") nil)
(define-key minibuffer-local-isearch-map (kbd "M-p") nil)
#+END_SRC
